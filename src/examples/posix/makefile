
# output binary
BIN := posix_main.exe

TYPE := c

# source files
SRCS := \
	src/examples/scenarios/embedding_test.$(TYPE) \
	src/examples/scenarios/example_pubsub.$(TYPE) \
	src/examples/scenarios/example_reqrepack.$(TYPE) \
	src/examples/scenarios/example_query.$(TYPE) \
	src/examples/posix/posix_main.$(TYPE) \
	src/examples/posix/posix_console.$(TYPE) \
	src/examples/shared/console.$(TYPE) \
	src/platforms/posix/posix_platform.$(TYPE) \
	src/platforms/posix/posix_sockets.$(TYPE) \
	src/sfsc/platform/sfsc_strings.$(TYPE) \
	src/sfsc/proto/pb_common.$(TYPE) \
	src/sfsc/proto/pb_decode.$(TYPE) \
	src/sfsc/proto/pb_encode.$(TYPE) \
	src/sfsc/proto_gen/generated.pb.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_adapter.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_adapter_data.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_command.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_connect.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_constants.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_heartbeats.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_publisher.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_query.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_request.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_server.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_subscriber.$(TYPE) \
	src/sfsc/sfsc_adapter/sfsc_utils.$(TYPE) \
	src/sfsc/sfsc_adapter/user_ring.$(TYPE) \
	src/sfsc/zmtp/tweetnacl_stripped.$(TYPE) \
	src/sfsc/zmtp/zmtp.$(TYPE) \
	src/sfsc/zmtp/zmtp_connect.$(TYPE) \
	src/sfsc/zmtp/zmtp_curve.$(TYPE) \
	src/sfsc/zmtp/zmtp_io.$(TYPE) \
	src/sfsc/zmtp/zmtp_metadata.$(TYPE) \
	src/sfsc/zmtp/zmtp_null.$(TYPE) \
	src/sfsc/zmtp/zmtp_plain.$(TYPE) \
	src/sfsc/zmtp/zmtp_socket_types.$(TYPE) \
	src/sfsc/zmtp/zmtp_utils.cpp


# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := .o
# intermediate directory for generated dependency files
DEPDIR := .d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) )
$(shell mkdir -p $(dir $(DEPS)) )

# C compiler
CC := gcc #x86_64-w64-mingw32-gcc 
# C++ compiler
CXX := g++ #x86_64-w64-mingw32-g++ 
# linker
LD :=  gcc #x86_64-w64-mingw32-g++
# tar
TAR := tar

# C flags
CFLAGS := -std=c99
# C++ flags
CXXFLAGS := -std=c++11
# C/C++ flags
CPPFLAGS := -g -Wall -Wextra -pedantic -D POSIX -D ENABLE_PRINTS -D EMBEDDING_TEST
# linker flags
LDFLAGS :=
# linker flags: libraries to link (e.g. -lfoo)
LDLIBS :=
LDLIBS_AFTER := # -lwsock32 -lws2_32
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# link object files to binary
LINK.o = $(LD) $(LDFLAGS) $(LDLIBS) -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

$(BIN): $(OBJS)
	$(LINK.o) $^ $(LDLIBS_AFTER)

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cc
$(OBJDIR)/%.o: %.cc $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cxx
$(OBJDIR)/%.o: %.cxx $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
